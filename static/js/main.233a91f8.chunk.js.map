{"version":3,"sources":["components/Form.js","constants/constants.js","components/FormValidator.js","components/RegistrationForm.js","App.js","reportWebVitals.js","index.js"],"names":["Form","props","className","title","subtitle","signInBtn","name","onSubmit","children","errorMessages","FormValidator","React","useState","values","setValues","errors","setErrors","isValid","setIsValid","handleChange","evt","target","value","undefined","validity","valid","valueMissing","type","validator","isEmail","patternMismatch","validationMessage","setErrorMessage","closest","checkValidity","document","querySelector","checkFormValidity","RegistrationForm","isShown","setIsShown","setInput","e","hideList","placeholder","pattern","required","onChange","onFocus","user","email","tel","list","id","autoComplete","onBlur","setTimeout","readOnly","onClick","event","lang","for","href","disabled","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.233a91f8.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nfunction Form(props) {\r\n  return (\r\n    <div className=\"popup\">\r\n      <div className=\"popup__content\">\r\n        <h3 className=\"popup__title\">{props.title}</h3>\r\n        <div className=\"popup__subtitle\">\r\n          <p className=\"popup__text\">{props.subtitle}</p>\r\n          <button className=\"button button_entry\">{props.signInBtn}</button>\r\n        </div>\r\n        <form\r\n          className=\"popup__form\"\r\n          name={props.name}\r\n          onSubmit={props.onSubmit}\r\n        >\r\n          {props.children}\r\n        </form>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Form;\r\n","const errorMessages = {\r\n  empty: \"Это обязательное поле\",\r\n  wrongEmail: \"Введите действующий e-mail\",\r\n  takeLang: \"Пожалуйста, выберите язык\",\r\n  wrongName: \"Поле может содержать только буквы, дефис или пробел\",\r\n  wrongTelFormat:\r\n    \"Поле может содержать 11 цифр, круглые скобки, дефис и знак плюс\",\r\n};\r\n\r\nexport { errorMessages };\r\n","import React from \"react\";\r\nimport { errorMessages } from \"../constants/constants\";\r\nimport isEmail from \"validator/lib/isEmail\";\r\nimport validator from \"validator\";\r\n\r\nexport const FormValidator = () => {\r\n  const [values, setValues] = React.useState({});\r\n  const [errors, setErrors] = React.useState({});\r\n  const [isValid, setIsValid] = React.useState(false);\r\n\r\n  const handleChange = (evt) => {\r\n    const target = evt.target;\r\n    const name = target.name;\r\n    const value = target.value;\r\n    setValues({ ...values, [name]: value });\r\n    setErrorMessage(target, name);\r\n    setIsValid(checkFormValidity(target));\r\n  };\r\n\r\n  function checkFormValidity(target) {\r\n    if (\r\n      target.closest(\"form\").checkValidity() &&\r\n      document.querySelector(\"#lang\").value\r\n    ) {\r\n      return true;\r\n    } else {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  function setErrorMessage(target, name) {\r\n    if (target.validity !== undefined) {\r\n      if (target.validity.valid) {\r\n        setErrors({ ...errors, [name]: \"\" });\r\n        return;\r\n      }\r\n      if (target.validity.valueMissing) {\r\n        setErrors({ ...errors, [name]: errorMessages.empty });\r\n        return;\r\n      }\r\n\r\n      if (target.type === \"email\" && !validator.isEmail(target.value)) {\r\n        setErrors({ ...errors, [name]: errorMessages.wrongEmail });\r\n        return;\r\n      }\r\n\r\n      if (target.validity.patternMismatch) {\r\n        if (target.name === \"user\") {\r\n          setErrors({ ...errors, [name]: errorMessages.wrongName });\r\n          return;\r\n        }\r\n        if (target.type === \"tel\") {\r\n          setErrors({ ...errors, [name]: errorMessages.wrongTelFormat });\r\n          return;\r\n        }\r\n      } else {\r\n        setErrors({ ...errors, [name]: target.validationMessage });\r\n        return;\r\n      }\r\n    }\r\n  }\r\n  return { values, handleChange, errors, isValid };\r\n};\r\n","import React from \"react\";\r\nimport Form from \"./Form\";\r\nimport { FormValidator } from \"../components/FormValidator\";\r\n\r\nfunction RegistrationForm(props) {\r\n  const { handleChange, errors, isValid } = FormValidator();\r\n  const [isShown, setIsShown] = React.useState(false);\r\n\r\n  function showList() {\r\n    setIsShown(true);\r\n  }\r\n\r\n  function setInput(e) {\r\n    document.querySelector(\"#lang\").value = e.target.value;\r\n    hideList();\r\n  }\r\n\r\n  function hideList() {\r\n    setIsShown(false);\r\n  }\r\n\r\n  return (\r\n    <Form\r\n      name=\"registration\"\r\n      title=\"Регистрация\"\r\n      subtitle=\"Уже есть аккаунт?\"\r\n      signInBtn=\"Войти\"\r\n    >\r\n      <div className=\"popup__input-box\">\r\n        <h4 className=\"popup__input-name\">Имя</h4>{\" \"}\r\n        <input\r\n          type=\"text\"\r\n          name=\"user\"\r\n          className=\"popup__input\"\r\n          placeholder=\"Введите Ваше Имя\"\r\n          pattern=\"^([A-Za-zА-Яа-яЁё \\-]+)$\"\r\n          required\r\n          onChange={handleChange}\r\n          onFocus={handleChange}\r\n        />\r\n      </div>\r\n      <span className=\"popup__error\">{errors.user}</span>\r\n      <div className=\"popup__input-box\">\r\n        <h4 className=\"popup__input-name\">Email</h4>\r\n        <input\r\n          type=\"email\"\r\n          name=\"email\"\r\n          className=\"popup__input\"\r\n          placeholder=\"Введите ваш email\"\r\n          required\r\n          onChange={handleChange}\r\n          onFocus={handleChange}\r\n        />\r\n      </div>\r\n      <span className=\"popup__error\">{errors.email}</span>\r\n      <div className=\"popup__input-box\">\r\n        <h4 className=\"popup__input-name\">Номер телефона</h4>\r\n        <input\r\n          type=\"tel\"\r\n          name=\"tel\"\r\n          className=\"popup__input\"\r\n          placeholder=\"Введите номер телефона\"\r\n          pattern=\"^\\+?([()\\-]*\\d){11}[()\\-]*$\"\r\n          required\r\n          onChange={handleChange}\r\n          onFocus={handleChange}\r\n        />\r\n      </div>\r\n      <span className=\"popup__error\">{errors.tel}</span>\r\n      <div className=\"popup__input-box\">\r\n        <h4 className=\"popup__input-name\">Язык</h4>\r\n        <input\r\n          className=\"popup__input\"\r\n          placeholder=\"Язык\"\r\n          list=\"\"\r\n          name=\"lang\"\r\n          id=\"lang\"\r\n          autoComplete=\"off\"\r\n          required\r\n          onFocus={showList}\r\n          onBlur={(e) => {\r\n            setTimeout(hideList, 100);\r\n            handleChange(e);\r\n          }}\r\n          readOnly\r\n        />\r\n        <datalist\r\n          id=\"datalist\"\r\n          className={\r\n            isShown\r\n              ? \"popup__datalist popup__datalist_opened\"\r\n              : \"popup__datalist\"\r\n          }\r\n        >\r\n          <option\r\n            className=\"popup__option\"\r\n            onClick={(event) => {\r\n              setInput(event);\r\n              handleChange(event);\r\n            }}\r\n          >\r\n            Русский\r\n          </option>\r\n          <option\r\n            className=\"popup__option\"\r\n            onClick={(event) => {\r\n              setInput(event);\r\n              handleChange(event);\r\n            }}\r\n          >\r\n            Английский\r\n          </option>\r\n          <option\r\n            className=\"popup__option\"\r\n            onClick={(event) => {\r\n              setInput(event);\r\n              handleChange(event);\r\n            }}\r\n          >\r\n            Китайский\r\n          </option>\r\n          <option\r\n            className=\"popup__option\"\r\n            onClick={(event) => {\r\n              setInput(event);\r\n              handleChange(event);\r\n            }}\r\n          >\r\n            Испанский\r\n          </option>\r\n        </datalist>\r\n      </div>\r\n      <span className=\"popup__error\">{errors.lang}</span>\r\n      <div className=\"popup__checkbox\">\r\n        <input\r\n          className=\"popup__input-checkbox\"\r\n          type=\"checkbox\"\r\n          id=\"conditions\"\r\n          name=\"conditions\"\r\n          onChange={handleChange}\r\n          required\r\n        />\r\n        <label for=\"conditions\" className=\"popup__checkbox-text\">\r\n          Принимаю{\" \"}\r\n          <a className=\"popup__checkbox-link\" href=\"#\">\r\n            условия\r\n          </a>{\" \"}\r\n          использования\r\n        </label>\r\n      </div>\r\n      <button\r\n        className={\r\n          isValid\r\n            ? \"button button_size_big button_active\"\r\n            : \"button button_size_big button_inactive \"\r\n        }\r\n        disabled={isValid ? false : true}\r\n      >\r\n        Зарегистрироваться\r\n      </button>\r\n    </Form>\r\n  );\r\n}\r\n\r\nexport default RegistrationForm;\r\n","import \"./App.css\";\nimport RegistrationForm from \"./components/RegistrationForm\";\n\nfunction App() {\n  return <RegistrationForm />;\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}